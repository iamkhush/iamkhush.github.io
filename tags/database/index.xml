<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on Ankush Chadda</title><link>https://ankushchadda.in/tags/database/</link><description>Recent content in Database on Ankush Chadda</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Sep 2020 00:04:06 +0200</lastBuildDate><atom:link href="https://ankushchadda.in/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Postgre's Wire Protocol</title><link>https://ankushchadda.in/posts/postgres-understanding-the-wire-protocol/</link><pubDate>Sat, 26 Sep 2020 00:04:06 +0200</pubDate><guid>https://ankushchadda.in/posts/postgres-understanding-the-wire-protocol/</guid><description>Introduction to Postgres Wire Protocol Postgres uses Message based protocol to comunicate between clients( for eg. psql) and DB server. I will try to summarize some aspects of the protocol.
Current version is 3.0 Supports TCP/IP and Unix domain sockets (IPC Sockets). Each connection goes through 3 phases - Startup Phase Normal Phase Termination Phase Startup Phase Client opens connection by sending startup message ( See 1 in the figure above ) The structure of a startup message is as follows - 4 byte 4 bytes Length of message Protocol Version Message Data like username, database name etc Server checks the message data from above and also its own config files, to determine the response, which can be one of the following - A success response (AuthenticationOk) ( 3a in the figure ) An error response (ErrorResponse) ( 3b in the figure ) Authentication related messages( like AuthenticationMD5Password) Protocol negotiation response (NegotiateProtocolVersion) If the response was AuthenticationOk then server sends some more messages( 4 in the figure ), but the most important of them is ReadyForQuery message( 5 in the figure ).</description></item><item><title>Postgres Indexes, PL/pgSQL and other learnings</title><link>https://ankushchadda.in/posts/postgres-indexes-and-other-learnings/</link><pubDate>Tue, 02 Feb 2016 01:30:01 +0530</pubDate><guid>https://ankushchadda.in/posts/postgres-indexes-and-other-learnings/</guid><description>Recently I had to do a bit of reading on building Indexes in Postgres. Intrestingly I found some striking features about indexing types in Postgres
Extensions Postgres has a collection of extensions/modules. These are basically set of functions. One such module is pg_trgm. Quoting from the documentation- &amp;ldquo;pg_trgm provides functions and operators for determining the similarity of ASCII alphanumeric text based on trigram matching, as well as index operator classes that support fast searching for similar strings&amp;rdquo; Documentation</description></item></channel></rss>